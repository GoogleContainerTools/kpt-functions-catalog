{
  "description": "MonitoringServiceLevelObjectiveList is a list of MonitoringServiceLevelObjective",
  "required": ["items"],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": ["string", "null"],
      "enum": ["monitoring.cnrm.cloud.google.com/v1beta1"]
    },
    "items": {
      "description": "List of monitoringservicelevelobjectives. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
      "type": ["array", "null"],
      "items": {
        "type": ["object", "null"],
        "required": ["spec"],
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": ["string", "null"],
            "enum": ["monitoring.cnrm.cloud.google.com/v1beta1"]
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": ["string", "null"],
            "enum": ["MonitoringServiceLevelObjective"]
          },
          "metadata": {
            "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
            "type": ["object", "null"],
            "properties": {
              "annotations": {
                "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                "type": ["object", "null"],
                "additionalProperties": {
                  "type": ["string", "null"]
                }
              },
              "clusterName": {
                "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
                "type": ["string", "null"]
              },
              "creationTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": ["string", "null"],
                "format": "date-time"
              },
              "deletionGracePeriodSeconds": {
                "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                "type": ["integer", "null"],
                "format": "int64"
              },
              "deletionTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": ["string", "null"],
                "format": "date-time"
              },
              "finalizers": {
                "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                "type": ["array", "null"],
                "items": {
                  "type": ["string", "null"]
                },
                "x-kubernetes-patch-strategy": "merge"
              },
              "generateName": {
                "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                "type": ["string", "null"]
              },
              "generation": {
                "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                "type": ["integer", "null"],
                "format": "int64"
              },
              "labels": {
                "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                "type": ["object", "null"],
                "additionalProperties": {
                  "type": ["string", "null"]
                }
              },
              "managedFields": {
                "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
                "type": ["array", "null"],
                "items": {
                  "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
                  "type": ["object", "null"],
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                      "type": ["string", "null"]
                    },
                    "fieldsType": {
                      "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                      "type": ["string", "null"]
                    },
                    "fieldsV1": {
                      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                      "type": ["object", "null"]
                    },
                    "manager": {
                      "description": "Manager is an identifier of the workflow managing these fields.",
                      "type": ["string", "null"]
                    },
                    "operation": {
                      "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                      "type": ["string", "null"]
                    },
                    "subresource": {
                      "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                      "type": ["string", "null"]
                    },
                    "time": {
                      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                      "type": ["string", "null"],
                      "format": "date-time"
                    }
                  }
                }
              },
              "name": {
                "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                "type": ["string", "null"]
              },
              "namespace": {
                "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
                "type": ["string", "null"]
              },
              "ownerReferences": {
                "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                "type": ["array", "null"],
                "items": {
                  "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                  "type": ["object", "null"],
                  "required": ["apiVersion", "kind", "name", "uid"],
                  "properties": {
                    "apiVersion": {
                      "description": "API version of the referent.",
                      "type": "string"
                    },
                    "blockOwnerDeletion": {
                      "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                      "type": ["boolean", "null"]
                    },
                    "controller": {
                      "description": "If true, this reference points to the managing controller.",
                      "type": ["boolean", "null"]
                    },
                    "kind": {
                      "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                      "type": "string"
                    },
                    "uid": {
                      "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                      "type": "string"
                    }
                  },
                  "x-kubernetes-map-type": "atomic"
                },
                "x-kubernetes-patch-merge-key": "uid",
                "x-kubernetes-patch-strategy": "merge"
              },
              "resourceVersion": {
                "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                "type": ["string", "null"]
              },
              "selfLink": {
                "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
                "type": ["string", "null"]
              },
              "uid": {
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                "type": ["string", "null"]
              }
            }
          },
          "spec": {
            "type": "object",
            "required": ["goal", "projectRef", "serviceRef"],
            "properties": {
              "calendarPeriod": {
                "description": "A calendar period, semantically \"since the start of the current ``\". At this time, only `DAY`, `WEEK`, `FORTNIGHT`, and `MONTH` are supported. Possible values: CALENDAR_PERIOD_UNSPECIFIED, DAY, WEEK, FORTNIGHT, MONTH, QUARTER, HALF, YEAR",
                "type": ["string", "null"]
              },
              "displayName": {
                "description": "Name used for UI elements listing this SLO.",
                "type": ["string", "null"]
              },
              "goal": {
                "description": "The fraction of service that must be good in order for this objective to be met. `0 < goal <= 0.999`.",
                "type": "number",
                "format": "double"
              },
              "projectRef": {
                "description": "The Project that this resource belongs to.",
                "type": "object",
                "properties": {
                  "external": {
                    "description": "The project for the resource",
                    "type": ["string", "null"]
                  },
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": ["string", "null"]
                  },
                  "namespace": {
                    "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                    "type": ["string", "null"]
                  }
                }
              },
              "resourceID": {
                "description": "Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.",
                "type": ["string", "null"]
              },
              "rollingPeriod": {
                "description": "A rolling time period, semantically \"in the past ``\". Must be an integer multiple of 1 day no larger than 30 days.",
                "type": ["string", "null"]
              },
              "serviceLevelIndicator": {
                "description": "The definition of good service, used to measure and calculate the quality of the `Service`'s performance with respect to a single aspect of service quality.",
                "type": ["object", "null"],
                "properties": {
                  "basicSli": {
                    "description": "Basic SLI on a well-known service type.",
                    "type": ["object", "null"],
                    "properties": {
                      "availability": {
                        "description": "Good service is defined to be the count of requests made to this service that return successfully.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "latency": {
                        "description": "Good service is defined to be the count of requests made to this service that are fast enough with respect to `latency.threshold`.",
                        "type": ["object", "null"],
                        "properties": {
                          "experience": {
                            "description": "A description of the experience associated with failing requests. Possible values: LATENCY_EXPERIENCE_UNSPECIFIED, DELIGHTING, SATISFYING, ANNOYING",
                            "type": ["string", "null"]
                          },
                          "threshold": {
                            "description": "Good service is defined to be the count of requests made to this service that return in no more than `threshold`.",
                            "type": ["string", "null"]
                          }
                        }
                      },
                      "location": {
                        "description": "OPTIONAL: The set of locations to which this SLI is relevant. Telemetry from other locations will not be used to calculate performance for this SLI. If omitted, this SLI applies to all locations in which the Service has activity. For service types that don't support breaking down by location, setting this field will result in an error.",
                        "type": ["array", "null"],
                        "items": {
                          "type": ["string", "null"]
                        }
                      },
                      "method": {
                        "description": "OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from other methods will not be used to calculate performance for this SLI. If omitted, this SLI applies to all the Service's methods. For service types that don't support breaking down by method, setting this field will result in an error.",
                        "type": ["array", "null"],
                        "items": {
                          "type": ["string", "null"]
                        }
                      },
                      "operationAvailability": {
                        "description": "Good service is defined to be the count of operations performed by this service that return successfully",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "operationLatency": {
                        "description": "Good service is defined to be the count of operations performed by this service that are fast enough with respect to `operation_latency.threshold`.",
                        "type": ["object", "null"],
                        "properties": {
                          "experience": {
                            "description": "A description of the experience associated with failing requests. Possible values: LATENCY_EXPERIENCE_UNSPECIFIED, DELIGHTING, SATISFYING, ANNOYING",
                            "type": ["string", "null"]
                          },
                          "threshold": {
                            "description": "Good service is defined to be the count of operations that are completed in no more than `threshold`.",
                            "type": ["string", "null"]
                          }
                        }
                      },
                      "version": {
                        "description": "OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry from other API versions will not be used to calculate performance for this SLI. If omitted, this SLI applies to all API versions. For service types that don't support breaking down by version, setting this field will result in an error.",
                        "type": ["array", "null"],
                        "items": {
                          "type": ["string", "null"]
                        }
                      }
                    }
                  },
                  "requestBased": {
                    "description": "Request-based SLIs",
                    "type": ["object", "null"],
                    "properties": {
                      "distributionCut": {
                        "description": "`distribution_cut` is used when `good_service` is a count of values aggregated in a `Distribution` that fall into a good range. The `total_service` is the total count of all values aggregated in the `Distribution`.",
                        "type": ["object", "null"],
                        "properties": {
                          "distributionFilter": {
                            "description": "A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) specifying a `TimeSeries` aggregating values. Must have `ValueType = DISTRIBUTION` and `MetricKind = DELTA` or `MetricKind = CUMULATIVE`.",
                            "type": ["string", "null"]
                          },
                          "range": {
                            "description": "Range of values considered \"good.\" For a one-sided range, set one bound to an infinite value.",
                            "type": ["object", "null"],
                            "properties": {
                              "max": {
                                "description": "Range maximum.",
                                "type": ["number", "null"],
                                "format": "double"
                              },
                              "min": {
                                "description": "Range minimum.",
                                "type": ["number", "null"],
                                "format": "double"
                              }
                            }
                          }
                        }
                      },
                      "goodTotalRatio": {
                        "description": "`good_total_ratio` is used when the ratio of `good_service` to `total_service` is computed from two `TimeSeries`.",
                        "type": ["object", "null"],
                        "properties": {
                          "badServiceFilter": {
                            "description": "A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) specifying a `TimeSeries` quantifying bad service, either demanded service that was not provided or demanded service that was of inadequate quality. Must have `ValueType = DOUBLE` or `ValueType = INT64` and must have `MetricKind = DELTA` or `MetricKind = CUMULATIVE`.",
                            "type": ["string", "null"]
                          },
                          "goodServiceFilter": {
                            "description": "A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) specifying a `TimeSeries` quantifying good service provided. Must have `ValueType = DOUBLE` or `ValueType = INT64` and must have `MetricKind = DELTA` or `MetricKind = CUMULATIVE`.",
                            "type": ["string", "null"]
                          },
                          "totalServiceFilter": {
                            "description": "A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) specifying a `TimeSeries` quantifying total demanded service. Must have `ValueType = DOUBLE` or `ValueType = INT64` and must have `MetricKind = DELTA` or `MetricKind = CUMULATIVE`.",
                            "type": ["string", "null"]
                          }
                        }
                      }
                    }
                  },
                  "windowsBased": {
                    "description": "Windows-based SLIs",
                    "type": ["object", "null"],
                    "properties": {
                      "goodBadMetricFilter": {
                        "description": "A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) specifying a `TimeSeries` with `ValueType = BOOL`. The window is good if any `true` values appear in the window.",
                        "type": ["string", "null"]
                      },
                      "goodTotalRatioThreshold": {
                        "description": "A window is good if its `performance` is high enough.",
                        "type": ["object", "null"],
                        "properties": {
                          "basicSliPerformance": {
                            "description": "`BasicSli` to evaluate to judge window quality.",
                            "type": ["object", "null"],
                            "properties": {
                              "availability": {
                                "description": "Good service is defined to be the count of requests made to this service that return successfully.",
                                "x-kubernetes-preserve-unknown-fields": true
                              },
                              "latency": {
                                "description": "Good service is defined to be the count of requests made to this service that are fast enough with respect to `latency.threshold`.",
                                "type": ["object", "null"],
                                "properties": {
                                  "experience": {
                                    "description": "A description of the experience associated with failing requests. Possible values: LATENCY_EXPERIENCE_UNSPECIFIED, DELIGHTING, SATISFYING, ANNOYING",
                                    "type": ["string", "null"]
                                  },
                                  "threshold": {
                                    "description": "Good service is defined to be the count of requests made to this service that return in no more than `threshold`.",
                                    "type": ["string", "null"]
                                  }
                                }
                              },
                              "location": {
                                "description": "OPTIONAL: The set of locations to which this SLI is relevant. Telemetry from other locations will not be used to calculate performance for this SLI. If omitted, this SLI applies to all locations in which the Service has activity. For service types that don't support breaking down by location, setting this field will result in an error.",
                                "type": ["array", "null"],
                                "items": {
                                  "type": ["string", "null"]
                                }
                              },
                              "method": {
                                "description": "OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from other methods will not be used to calculate performance for this SLI. If omitted, this SLI applies to all the Service's methods. For service types that don't support breaking down by method, setting this field will result in an error.",
                                "type": ["array", "null"],
                                "items": {
                                  "type": ["string", "null"]
                                }
                              },
                              "operationAvailability": {
                                "description": "Good service is defined to be the count of operations performed by this service that return successfully",
                                "x-kubernetes-preserve-unknown-fields": true
                              },
                              "operationLatency": {
                                "description": "Good service is defined to be the count of operations performed by this service that are fast enough with respect to `operation_latency.threshold`.",
                                "type": ["object", "null"],
                                "properties": {
                                  "experience": {
                                    "description": "A description of the experience associated with failing requests. Possible values: LATENCY_EXPERIENCE_UNSPECIFIED, DELIGHTING, SATISFYING, ANNOYING",
                                    "type": ["string", "null"]
                                  },
                                  "threshold": {
                                    "description": "Good service is defined to be the count of operations that are completed in no more than `threshold`.",
                                    "type": ["string", "null"]
                                  }
                                }
                              },
                              "version": {
                                "description": "OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry from other API versions will not be used to calculate performance for this SLI. If omitted, this SLI applies to all API versions. For service types that don't support breaking down by version, setting this field will result in an error.",
                                "type": ["array", "null"],
                                "items": {
                                  "type": ["string", "null"]
                                }
                              }
                            }
                          },
                          "performance": {
                            "description": "`RequestBasedSli` to evaluate to judge window quality.",
                            "type": ["object", "null"],
                            "properties": {
                              "distributionCut": {
                                "description": "`distribution_cut` is used when `good_service` is a count of values aggregated in a `Distribution` that fall into a good range. The `total_service` is the total count of all values aggregated in the `Distribution`.",
                                "type": ["object", "null"],
                                "properties": {
                                  "distributionFilter": {
                                    "description": "A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) specifying a `TimeSeries` aggregating values. Must have `ValueType = DISTRIBUTION` and `MetricKind = DELTA` or `MetricKind = CUMULATIVE`.",
                                    "type": ["string", "null"]
                                  },
                                  "range": {
                                    "description": "Range of values considered \"good.\" For a one-sided range, set one bound to an infinite value.",
                                    "type": ["object", "null"],
                                    "properties": {
                                      "max": {
                                        "description": "Range maximum.",
                                        "type": ["number", "null"],
                                        "format": "double"
                                      },
                                      "min": {
                                        "description": "Range minimum.",
                                        "type": ["number", "null"],
                                        "format": "double"
                                      }
                                    }
                                  }
                                }
                              },
                              "goodTotalRatio": {
                                "description": "`good_total_ratio` is used when the ratio of `good_service` to `total_service` is computed from two `TimeSeries`.",
                                "type": ["object", "null"],
                                "properties": {
                                  "badServiceFilter": {
                                    "description": "A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) specifying a `TimeSeries` quantifying bad service, either demanded service that was not provided or demanded service that was of inadequate quality. Must have `ValueType = DOUBLE` or `ValueType = INT64` and must have `MetricKind = DELTA` or `MetricKind = CUMULATIVE`.",
                                    "type": ["string", "null"]
                                  },
                                  "goodServiceFilter": {
                                    "description": "A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) specifying a `TimeSeries` quantifying good service provided. Must have `ValueType = DOUBLE` or `ValueType = INT64` and must have `MetricKind = DELTA` or `MetricKind = CUMULATIVE`.",
                                    "type": ["string", "null"]
                                  },
                                  "totalServiceFilter": {
                                    "description": "A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) specifying a `TimeSeries` quantifying total demanded service. Must have `ValueType = DOUBLE` or `ValueType = INT64` and must have `MetricKind = DELTA` or `MetricKind = CUMULATIVE`.",
                                    "type": ["string", "null"]
                                  }
                                }
                              }
                            }
                          },
                          "threshold": {
                            "description": "If window `performance >= threshold`, the window is counted as good.",
                            "type": ["number", "null"],
                            "format": "double"
                          }
                        }
                      },
                      "metricMeanInRange": {
                        "description": "A window is good if the metric's value is in a good range, averaged across returned streams.",
                        "type": ["object", "null"],
                        "properties": {
                          "range": {
                            "description": "Range of values considered \"good.\" For a one-sided range, set one bound to an infinite value.",
                            "type": ["object", "null"],
                            "properties": {
                              "max": {
                                "description": "Range maximum.",
                                "type": ["number", "null"],
                                "format": "double"
                              },
                              "min": {
                                "description": "Range minimum.",
                                "type": ["number", "null"],
                                "format": "double"
                              }
                            }
                          },
                          "timeSeries": {
                            "description": "A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) specifying the `TimeSeries` to use for evaluating window quality.",
                            "type": ["string", "null"]
                          }
                        }
                      },
                      "metricSumInRange": {
                        "description": "A window is good if the metric's value is in a good range, summed across returned streams.",
                        "type": ["object", "null"],
                        "properties": {
                          "range": {
                            "description": "Range of values considered \"good.\" For a one-sided range, set one bound to an infinite value.",
                            "type": ["object", "null"],
                            "properties": {
                              "max": {
                                "description": "Range maximum.",
                                "type": ["number", "null"],
                                "format": "double"
                              },
                              "min": {
                                "description": "Range minimum.",
                                "type": ["number", "null"],
                                "format": "double"
                              }
                            }
                          },
                          "timeSeries": {
                            "description": "A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters) specifying the `TimeSeries` to use for evaluating window quality.",
                            "type": ["string", "null"]
                          }
                        }
                      },
                      "windowPeriod": {
                        "description": "Duration over which window quality is evaluated. Must be an integer fraction of a day and at least `60s`.",
                        "type": ["string", "null"]
                      }
                    }
                  }
                }
              },
              "serviceRef": {
                "type": "object",
                "properties": {
                  "external": {
                    "description": "The service for the resource",
                    "type": ["string", "null"]
                  },
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": ["string", "null"]
                  },
                  "namespace": {
                    "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                    "type": ["string", "null"]
                  }
                }
              }
            }
          },
          "status": {
            "type": ["object", "null"],
            "properties": {
              "conditions": {
                "description": "Conditions represent the latest available observation of the resource's current state.",
                "type": ["array", "null"],
                "items": {
                  "type": ["object", "null"],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "Last time the condition transitioned from one status to another.",
                      "type": ["string", "null"]
                    },
                    "message": {
                      "description": "Human-readable message indicating details about last transition.",
                      "type": ["string", "null"]
                    },
                    "reason": {
                      "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
                      "type": ["string", "null"]
                    },
                    "status": {
                      "description": "Status is the status of the condition. Can be True, False, Unknown.",
                      "type": ["string", "null"]
                    },
                    "type": {
                      "description": "Type is the type of the condition.",
                      "type": ["string", "null"]
                    }
                  }
                }
              },
              "createTime": {
                "description": "Time stamp of the `Create` or most recent `Update` command on this `Slo`.",
                "type": ["string", "null"],
                "format": "date-time"
              },
              "deleteTime": {
                "description": "Time stamp of the `Update` or `Delete` command that made this no longer a current `Slo`. This field is not populated in `ServiceLevelObjective`s returned from calls to `GetServiceLevelObjective` and `ListServiceLevelObjectives`, because it is always empty in the current version. It is populated in `ServiceLevelObjective`s representing previous versions in the output of `ListServiceLevelObjectiveVersions`. Because all old configuration versions are stored, `Update` operations mark the obsoleted version as deleted.",
                "type": ["string", "null"],
                "format": "date-time"
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.",
                "type": ["integer", "null"]
              },
              "serviceManagementOwned": {
                "description": "Output only. If set, this SLO is managed at the [Service Management](https://cloud.google.com/service-management/overview) level. Therefore the service yaml file is the source of truth for this SLO, and API `Update` and `Delete` operations are forbidden.",
                "type": ["boolean", "null"]
              }
            }
          }
        },
        "x-kubernetes-group-version-kind": [
          {
            "group": "monitoring.cnrm.cloud.google.com",
            "kind": "MonitoringServiceLevelObjective",
            "version": "v1beta1"
          }
        ]
      }
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": ["string", "null"],
      "enum": ["MonitoringServiceLevelObjectiveList"]
    },
    "metadata": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "type": ["object", "null"],
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": ["string", "null"]
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "type": ["integer", "null"],
          "format": "int64"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": ["string", "null"]
        },
        "selfLink": {
          "description": "selfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": ["string", "null"]
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "monitoring.cnrm.cloud.google.com",
      "kind": "MonitoringServiceLevelObjectiveList",
      "version": "v1beta1"
    }
  ],
  "$schema": "http://json-schema.org/schema#",
  "type": "object"
}
