{
  "type": "object",
  "required": ["spec"],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": ["string", "null"],
      "enum": ["compute.cnrm.cloud.google.com/v1beta1"]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": ["string", "null"],
      "enum": ["ComputeResourcePolicy"]
    },
    "metadata": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": ["object", "null"],
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": ["object", "null"],
          "additionalProperties": {
            "type": ["string", "null"]
          }
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
          "type": ["string", "null"]
        },
        "creationTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": ["string", "null"],
          "format": "date-time"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": ["integer", "null"],
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": ["string", "null"],
          "format": "date-time"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": ["array", "null"],
          "items": {
            "type": ["string", "null"]
          },
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": ["string", "null"]
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": ["integer", "null"],
          "format": "int64"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": ["object", "null"],
          "additionalProperties": {
            "type": ["string", "null"]
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": ["array", "null"],
          "items": {
            "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
            "type": ["object", "null"],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                "type": ["string", "null"]
              },
              "fieldsType": {
                "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                "type": ["string", "null"]
              },
              "fieldsV1": {
                "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                "type": ["object", "null"]
              },
              "manager": {
                "description": "Manager is an identifier of the workflow managing these fields.",
                "type": ["string", "null"]
              },
              "operation": {
                "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                "type": ["string", "null"]
              },
              "subresource": {
                "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                "type": ["string", "null"]
              },
              "time": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": ["string", "null"],
                "format": "date-time"
              }
            }
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": ["string", "null"]
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": ["string", "null"]
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": ["array", "null"],
          "items": {
            "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
            "type": ["object", "null"],
            "required": ["apiVersion", "kind", "name", "uid"],
            "properties": {
              "apiVersion": {
                "description": "API version of the referent.",
                "type": "string"
              },
              "blockOwnerDeletion": {
                "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                "type": ["boolean", "null"]
              },
              "controller": {
                "description": "If true, this reference points to the managing controller.",
                "type": ["boolean", "null"]
              },
              "kind": {
                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "name": {
                "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                "type": "string"
              },
              "uid": {
                "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                "type": "string"
              }
            },
            "x-kubernetes-map-type": "atomic"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": ["string", "null"]
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": ["string", "null"]
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": ["string", "null"]
        }
      }
    },
    "spec": {
      "type": ["object", "null"],
      "required": ["region"],
      "properties": {
        "description": {
          "description": "Immutable. An optional description of this resource. Provide this property when you create the resource.",
          "type": ["string", "null"]
        },
        "groupPlacementPolicy": {
          "description": "Immutable. Resource policy for instances used for placement configuration.",
          "type": ["object", "null"],
          "properties": {
            "availabilityDomainCount": {
              "description": "Immutable. The number of availability domains instances will be spread across. If two instances are in different\navailability domain, they will not be put in the same low latency network.",
              "type": ["integer", "null"]
            },
            "collocation": {
              "description": "Immutable. Collocation specifies whether to place VMs inside the same availability domain on the same low-latency network.\nSpecify 'COLLOCATED' to enable collocation. Can only be specified with 'vm_count'. If compute instances are created\nwith a COLLOCATED policy, then exactly 'vm_count' instances must be created at the same time with the resource policy\nattached. Possible values: [\"COLLOCATED\"].",
              "type": ["string", "null"]
            },
            "vmCount": {
              "description": "Immutable. Number of vms in this placement group.",
              "type": ["integer", "null"]
            }
          }
        },
        "instanceSchedulePolicy": {
          "description": "Immutable. Resource policy for scheduling instance operations.",
          "type": ["object", "null"],
          "required": ["timeZone"],
          "properties": {
            "expirationTime": {
              "description": "Immutable. The expiration time of the schedule. The timestamp is an RFC3339 string.",
              "type": ["string", "null"]
            },
            "startTime": {
              "description": "Immutable. The start time of the schedule. The timestamp is an RFC3339 string.",
              "type": ["string", "null"]
            },
            "timeZone": {
              "description": "Immutable. Specifies the time zone to be used in interpreting the schedule. The value of this field must be a time zone name\nfrom the tz database: http://en.wikipedia.org/wiki/Tz_database.",
              "type": "string"
            },
            "vmStartSchedule": {
              "description": "Immutable. Specifies the schedule for starting instances.",
              "type": ["object", "null"],
              "required": ["schedule"],
              "properties": {
                "schedule": {
                  "description": "Immutable. Specifies the frequency for the operation, using the unix-cron format.",
                  "type": "string"
                }
              }
            },
            "vmStopSchedule": {
              "description": "Immutable. Specifies the schedule for stopping instances.",
              "type": ["object", "null"],
              "required": ["schedule"],
              "properties": {
                "schedule": {
                  "description": "Immutable. Specifies the frequency for the operation, using the unix-cron format.",
                  "type": "string"
                }
              }
            }
          }
        },
        "region": {
          "description": "Immutable. Region where resource policy resides.",
          "type": "string"
        },
        "resourceID": {
          "description": "Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.",
          "type": ["string", "null"]
        },
        "snapshotSchedulePolicy": {
          "description": "Immutable. Policy for creating snapshots of persistent disks.",
          "type": ["object", "null"],
          "required": ["schedule"],
          "properties": {
            "retentionPolicy": {
              "description": "Immutable. Retention policy applied to snapshots created by this resource policy.",
              "type": ["object", "null"],
              "required": ["maxRetentionDays"],
              "properties": {
                "maxRetentionDays": {
                  "description": "Immutable. Maximum age of the snapshot that is allowed to be kept.",
                  "type": "integer"
                },
                "onSourceDiskDelete": {
                  "description": "Immutable. Specifies the behavior to apply to scheduled snapshots when\nthe source disk is deleted. Default value: \"KEEP_AUTO_SNAPSHOTS\" Possible values: [\"KEEP_AUTO_SNAPSHOTS\", \"APPLY_RETENTION_POLICY\"].",
                  "type": ["string", "null"]
                }
              }
            },
            "schedule": {
              "description": "Immutable. Contains one of an 'hourlySchedule', 'dailySchedule', or 'weeklySchedule'.",
              "type": "object",
              "properties": {
                "dailySchedule": {
                  "description": "Immutable. The policy will execute every nth day at the specified time.",
                  "type": ["object", "null"],
                  "required": ["daysInCycle", "startTime"],
                  "properties": {
                    "daysInCycle": {
                      "description": "Immutable. The number of days between snapshots.",
                      "type": "integer"
                    },
                    "startTime": {
                      "description": "Immutable. This must be in UTC format that resolves to one of\n00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example,\nboth 13:00-5 and 08:00 are valid.",
                      "type": "string"
                    }
                  }
                },
                "hourlySchedule": {
                  "description": "Immutable. The policy will execute every nth hour starting at the specified time.",
                  "type": ["object", "null"],
                  "required": ["hoursInCycle", "startTime"],
                  "properties": {
                    "hoursInCycle": {
                      "description": "Immutable. The number of hours between snapshots.",
                      "type": "integer"
                    },
                    "startTime": {
                      "description": "Immutable. Time within the window to start the operations.\nIt must be in an hourly format \"HH:MM\",\nwhere HH : [00-23] and MM : [00] GMT.\neg: 21:00.",
                      "type": "string"
                    }
                  }
                },
                "weeklySchedule": {
                  "description": "Immutable. Allows specifying a snapshot time for each day of the week.",
                  "type": ["object", "null"],
                  "required": ["dayOfWeeks"],
                  "properties": {
                    "dayOfWeeks": {
                      "description": "Immutable. May contain up to seven (one for each day of the week) snapshot times.",
                      "type": "array",
                      "items": {
                        "type": ["object", "null"],
                        "required": ["day", "startTime"],
                        "properties": {
                          "day": {
                            "description": "Immutable. The day of the week to create the snapshot. e.g. MONDAY Possible values: [\"MONDAY\", \"TUESDAY\", \"WEDNESDAY\", \"THURSDAY\", \"FRIDAY\", \"SATURDAY\", \"SUNDAY\"].",
                            "type": "string"
                          },
                          "startTime": {
                            "description": "Immutable. Time within the window to start the operations.\nIt must be in format \"HH:MM\", where HH : [00-23] and MM : [00-00] GMT.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "snapshotProperties": {
              "description": "Immutable. Properties with which the snapshots are created, such as labels.",
              "type": ["object", "null"],
              "properties": {
                "guestFlush": {
                  "description": "Immutable. Whether to perform a 'guest aware' snapshot.",
                  "type": ["boolean", "null"]
                },
                "labels": {
                  "description": "Immutable. A set of key-value pairs.",
                  "type": ["object", "null"],
                  "additionalProperties": {
                    "type": ["string", "null"]
                  }
                },
                "storageLocations": {
                  "description": "Immutable. Cloud Storage bucket location to store the auto snapshot\n(regional or multi-regional).",
                  "type": ["array", "null"],
                  "items": {
                    "type": ["string", "null"]
                  }
                }
              }
            }
          }
        }
      }
    },
    "status": {
      "type": ["object", "null"],
      "properties": {
        "conditions": {
          "description": "Conditions represent the latest available observation of the resource's current state.",
          "type": ["array", "null"],
          "items": {
            "type": ["object", "null"],
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "type": ["string", "null"]
              },
              "message": {
                "description": "Human-readable message indicating details about last transition.",
                "type": ["string", "null"]
              },
              "reason": {
                "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
                "type": ["string", "null"]
              },
              "status": {
                "description": "Status is the status of the condition. Can be True, False, Unknown.",
                "type": ["string", "null"]
              },
              "type": {
                "description": "Type is the type of the condition.",
                "type": ["string", "null"]
              }
            }
          }
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.",
          "type": ["integer", "null"]
        },
        "selfLink": {
          "type": ["string", "null"]
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "compute.cnrm.cloud.google.com",
      "kind": "ComputeResourcePolicy",
      "version": "v1beta1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}
