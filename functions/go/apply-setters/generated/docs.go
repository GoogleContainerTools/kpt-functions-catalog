

// Code generated by "mdtogo"; DO NOT EDIT.
package generated

var ApplySettersShort = `Apply setter values on resources fields. May set either the complete or partial field value.`
var ApplySettersLong = `
  kpt fn eval apply-setters:VERSION [DIR] -- [setter_name=setter_value]

Data model

1. Fields reference setters specified as line comments -- e.g.

      # kpt-set: replicas

2. Input values to setters are provided as key-value pairs -- e.g.

      kpt fn eval apply-setters:unstable -- replicas=3

Control flow

1. Read the package resources.
2. Locate all fields which reference the setter and change their values.
3. Write the modified resources back to the package.
`
var ApplySettersExamples = `
Let's start with the input resources

  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: the-map # kpt-set: ${name}
  data:
    some-key: some-value
  ---
  apiVersion: v1
  kind: MyKind
  metadata:
    name: ns
  environments: # kpt-set: ${env}
    - dev
    - stage

Invoke apply-setters function on the input resources

  kpt fn eval apply-setters:unstable -- 'name=my-map' 'env=[prod, dev]'

The resources are transformed to

  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: my-map # kpt-set: ${name}
  data:
    some-key: some-value
  ---
  apiVersion: v1
  kind: MyKind
  metadata:
    name: ns
  environments: # kpt-set: ${env}
    - prod
    - dev
`
