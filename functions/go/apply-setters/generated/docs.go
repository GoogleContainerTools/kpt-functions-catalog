

// Code generated by "mdtogo"; DO NOT EDIT.
package generated

var ApplySettersShort = `Apply setter values on resource fields. Setters serve as parameters for template-free
setting of field values.`
var ApplySettersLong = `
Package publishers declare setters in the package, consumers can set their values
either declaratively or imperatively.

Setter names can be discovered in the pipeline section of Kptfile, and the values
can be declared next to setter names.

  apiVersion: v1alpha2
  kind: Kptfile
  metadata:
    name: my-pkg
  pipeline:
    mutators:
      - image: gcr.io/kpt-fn/apply-setters:unstable
        configMap:
          setter_name1: setter-value1
          setter_name2: setter-value2

The declared values for setters are rendered by invoking the following command:

  kpt fn render [PKG_PATH]

Alternatively, this function can be invoked imperatively on the package by passing the
inputs as key-value pairs.

  kpt fn eval --image gcr.io/kpt-fn/apply-setters:VERSION [PKG_PATH] -- [setter_name=setter_value]
`
var ApplySettersExamples = `
Setting scalar values:

Let's start with the input resource in a package

  apiVersion: v1
  kind: Deployment
  metadata:
    name: nginx-deployment # kpt-set: ${image}-deployment
  spec:
    replicas: 1 # kpt-set: ${replicas}

Discover the names of setters in the Kptfile and declare desired values.

  apiVersion: v1alpha2
  kind: Kptfile
  metadata:
    name: my-pkg
  pipeline:
    mutators:
      - image: gcr.io/kpt-fn/apply-setters:unstable
        configMap:
          image: ubuntu
          replicas: 3

Render the declared values by invoking:

  kpt fn render

Alternatively, values can be rendered imperatively

  kpt fn eval --image gcr.io/kpt-fn/apply-setters:unstable -- 'replicas=3'

Rendered resource looks like the following:

  apiVersion: v1
  kind: Deployment
  metadata:
    name: ubuntu-deployment # kpt-set: ${image}-deployment
  spec:
    replicas: 3 # kpt-set: ${replicas}

Setting array values:

Array values can also be parameterized using setters. Since the values of configMap
in pipeline definition must be of string type, the array values must be wrapped into
string. However, the rendered values in the resources will be array type.

Let's start with the input resource

  apiVersion: v1
  kind: MyKind
  metadata:
    name: foo
  environments: # kpt-set: ${env}
    - dev
    - stage

Declare the desired array values, wrapped into string.

  apiVersion: v1alpha2
  kind: Kptfile
  metadata:
    name: my-pkg
  pipeline:
    mutators:
      - image: gcr.io/kpt-fn/apply-setters:unstable
        configMap:
          env: |
            - prod
            - dev

Render the declared values by invoking:

  kpt fn render

Alternatively, values can be rendered imperatively

  kpt fn eval --image gcr.io/kpt-fn/apply-setters:unstable -- 'env=[prod, dev]'

Rendered resource looks like the following:

  apiVersion: v1
  kind: MyKind
  metadata:
    name: foo
  environments: # kpt-set: ${env}
    - prod
    - dev
`
