

// Code generated by "mdtogo"; DO NOT EDIT.
package generated

var GenerateServicesShort = `The generate-services kpt function generates [Config Controller Service resources](https://cloud.google.com/config-connector/docs/reference/resource-docs/serviceusage/service) required for usage of the other Config Controller resources supplied to the function.`
var GenerateServicesLong = `
## Usage

1. Create any Config Controller resource(s), in one or more yaml files, anywhere in a directory.
2. Create a ConfigMap with the ` + "`" + `function` + "`" + ` annotation to configure this resource as input to a containerized kpt function.
    Example:
    ` + "`" + `` + "`" + `` + "`" + `
    annotations:
      config.kubernetes.io/function: |
        container:
          image: gcr.io/kpt-fn/generate-services:unstable
    ` + "`" + `` + "`" + `` + "`" + `
3. (Optional) Set the ` + "`" + `data.namespace` + "`" + ` field to specify which namespace Services will be created in.
4. (Optional) Set the ` + "`" + `data.disable-on-destroy` + "`" + ` field to specify the value of the ` + "`" + `cnrm.cloud.google.com/disable-on-destroy` + "`" + ` annotation.
5. (Optional) Add the ` + "`" + `config.kubernetes.io/local-config: "true"` + "`" + ` annotation to tell ConfigSync to exclude the ConfigMap resource when applying.
6. Run [kpt fn run](https://googlecontainertools.github.io/kpt/guides/consumer/function/#declarative-run) on the directory containing the resource yaml files.
    Example:
    ` + "`" + `` + "`" + `` + "`" + `
    kpt fn run .
    ` + "`" + `` + "`" + `` + "`" + `
`
var GenerateServicesExamples = `
## Input Example

  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: generate-services
    annotations:
      config.kubernetes.io/local-config: "true"
      config.kubernetes.io/function: |
        container:
          image: gcr.io/kpt-fn/generate-services:unstable
  data:
    namespace: gcp-services
    disable-on-destroy: "false"
  ---
  apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
  kind: Project
  metadata:
    name: example-project-id
    namespace: projects
    annotations:
      cnrm.cloud.google.com/organization-id: "123456789012"
  spec: {}

## Output Example

All of the inputs will exist in the output, as well as any newly added Service resources:

  apiVersion: serviceusage.cnrm.cloud.google.com/v1beta1
  kind: Service
  metadata:
    name: example-project-id-cloudresourcemanager
    namespace: gcp-services
    annotations:
      cnrm.cloud.google.com/disable-on-destroy: "false"
      cnrm.cloud.google.com/project-id: example-project-id
      config.kubernetes.io/path: 'gcp-services/service_example-project-id-cloudresourcemanager.yaml'
  spec:
    resourceID: cloudresourcemanager.googleapis.com
`
