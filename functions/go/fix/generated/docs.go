

// Code generated by "mdtogo"; DO NOT EDIT.
package generated

var FixShort = `Fix resources and make them compatible with kpt 1.0.`
var FixLong = `
` + "`" + `fix` + "`" + ` helps you migrate the resources from ` + "`" + `v1alpha1` + "`" + ` format to ` + "`" + `v1alpha2` + "`" + ` format.
This is an automated step to migrate kpt packages which are compatible with kpt v0.X.Y
versions of kpt, and make them compatible with kpt 1.0

Here are the automated changes performed by ` + "`" + `fix` + "`" + ` function on ` + "`" + `v1alpha1` + "`" + ` kpt package:

1. The ` + "`" + `packageMetaData` + "`" + ` section will be transformed to ` + "`" + `info` + "`" + ` section.
2. ` + "`" + `upstream` + "`" + ` section(if present), in the ` + "`" + `v1alpha1` + "`" + ` Kptfile is converted to ` + "`" + `upstream` + "`" + `
   and ` + "`" + `upstreamLock` + "`" + ` sections in ` + "`" + `v1alpha2` + "`" + ` version of Kptfile.
3. ` + "`" + `dependencies` + "`" + ` section will be removed from the Kptfile.
4. Setters no longer follow the openapi format. The setters and substitutions will be converted 
   to simple setter patterns. ` + "`" + `apply-setters` + "`" + ` function and transformed setters
   will be added to the mutators section in the ` + "`" + `pipeline` + "`" + ` section.
5. Function configs will be transformed(function annotation will be removed) and corresponding 
   definitions will be added to Kptfile.
`
var FixExamples = `
Let's start with a simple input resource which is compatible with kpt v0.X.Y

  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: my-nginx
  spec:
    replicas: 3 # {"$kpt-set":"replicas"}

Here is the corresponding v1alpha1 Kptfile in the package

  apiVersion: kpt.dev/v1alpha1
  kind: Kptfile
  metadata:
    name: nginx
  openAPI:
    definitions:
      io.k8s.cli.setters.replicas:
        x-k8s-cli:
          setter:
            name: replicas
            value: "3"

Invoke ` + "`" + `fix` + "`" + ` function on the package:

  $ kpt fn eval --image gcr.io/kpt-fn/fix:unstable --include-meta-resources

Here is the transformed resource

  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: my-nginx
  spec:
    replicas: 3 # kpt-set: ${replicas}

Here is the transformed v1alpha2 Kptfile:

  apiVersion: kpt.dev/v1alpha2
  kind: Kptfile
  metadata:
    name: nginx
  pipeline:
    mutators:
      - image: gcr.io/kpt-fn/apply-setters:v0.1
        configMap:
          replicas: "3"
`
